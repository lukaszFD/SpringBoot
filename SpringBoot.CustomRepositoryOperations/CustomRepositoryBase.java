public class CustomRepositoryBase<T> implements CustomRepositoryOperations<T> {

    private final Class<T> entityClass;

    public CustomRepositoryBase(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    @Override
    public String getTableName() {
        Entity entityAnnotation = entityClass.getAnnotation(Entity.class);
        Table tableAnnotation = entityClass.getAnnotation(Table.class);

        if (tableAnnotation != null && tableAnnotation.name() != null && !tableAnnotation.name().isEmpty()) {
            return tableAnnotation.name();
        } else if (entityAnnotation != null && entityAnnotation.name() != null && !entityAnnotation.name().isEmpty()) {
            return entityAnnotation.name();
        } else {
            throw new RuntimeException("Unable to determine table name for entity: " + entityClass.getSimpleName());
        }
    }

    @Override
    public String getSchemaName() {
        Table tableAnnotation = entityClass.getAnnotation(Table.class);

        if (tableAnnotation != null && tableAnnotation.schema() != null && !tableAnnotation.schema().isEmpty()) {
            return tableAnnotation.schema();
        } else {
            return "default_schema"; // Provide a default schema name if not specified in the annotation
        }
    }

    @Modifying
    @Transactional
    @Query(value = "alter table :schema.:table modify id generated by default on null as identity(start with 1)", nativeQuery = true)
    public void restartSequence() {
        String schema = getSchemaName();
        String table = getTableName();
        // Your logic for restarting sequence
    }

    @Modifying
    @Transactional
    @Query(value = "truncate table :schema.:table drop storage", nativeQuery = true)
    public void truncateTable() {
        String schema = getSchemaName();
        String table = getTableName();
        // Your logic for truncating table
    }
}
